// MasterMind-- This program tells the exact place and the wrong place user guesses four alphabet placed in a coorect form among six different alphabets
// Melinda Chen 
// 2020-05-18

#include<iostream>
#include<Windows.h>
#include<cmath>
#include"colours.h"
#include<chrono>
#include<conio.h>
using namespace std;

// Constants
const int CODESIZE = 4;        // The maximum size of the guess

// Function Prototypes
bool master_mind(void);           // tells if the user gets the correct guess in 10 times
void seek_random();               // seek random numbers

// Main
int main()
{
	int win;                // the times of win
	int loss;               // the times of loss
	float winpercentage;      // the winning percentage
	char Playagain;         // ask the player whether to start a new round
	bool result;            // record whether the value returned is true or false
	float sum;              // the # of rounds user played in

	// Initialize
	win = 0;
	loss = 0;
	winpercentage = 0;

	// Seek random numbers
	seek_random();

	// Loop
	do
	{
		result = master_mind();        // Get true or false
		// Accumulate the times whether the player won or lost
		if (result)
			win++;
		else if(!result)
			loss++;
		// Ask the player if they want another round
		text_colour(f_gray, b_black);
		cout << " Play Again? (Y/N)";
		Playagain = toupper(_getwche());
		cout << endl<<endl;
	} while (Playagain == 'Y');
	
	// Calculate the winning percentage
	sum = win + loss;
	winpercentage = win / sum*100;
	// Prints out the result
	text_colour(f_dblue, b_gray);
	cout << "You played " << sum << " games - " << win << " Win and " << loss << " Loss for a winning percentage of " << winpercentage << "%!!";
	// Reset colour
	text_colour(f_white, b_black);
}

// seek_random-- This function seeks random numbers
void seek_random()
{
	int i;                  // Loop counter

// Seed the random number generator use the timer
	srand((unsigned)time(NULL));
	for (i = 0; i < rand(); i++)
		rand();
}

// master_mind-- this function returns true if the user gets the correct guess in 10 times; if not returns false
bool master_mind(void)
{
	char letters[] = { "RGBYCM" };         // The five possibilities in guesses
	char guess[CODESIZE + 1];             // This array contains the user's guess
	char answer[CODESIZE + 1];            // This array contains the answer randomly generated by the computer
	char copy[CODESIZE + 1];               // This array made a copy of the answer, so that it could match the similarities with user's guess
	int pos;                              // Loop counter(number of rounds)
	int pos2,pos3;                        // Loop counter
	int num_correct;                     // number of exact characters
	int num_wrong;                        // number of characters placed in the wrong place

	// Generate answer
	for (pos = 0;pos < CODESIZE;pos++)
		answer[pos] = letters[rand() % strlen(letters)];
	answer[pos] = '\0';

	// Loop until they win or out of rounds
	do
	{
		for (pos = 1;pos <= 10;)
		{
			text_colour(f_gray, b_black);
			cout << "Enter guess #" << pos << " : ";
			for (pos2 = 0;pos2 < CODESIZE;pos2++)
			{
				guess[pos2] = toupper(_getwch());
				// Validate
				while (guess[pos2] != 'R' && guess[pos2] != 'G' && guess[pos2] != 'B' && guess[pos2] != 'Y' && guess[pos2] != 'C' && guess[pos2] != 'M')
				{
					text_colour(f_dred, b_black);
					cout << "Invalid input; please enter the correct characters!!!" << endl;
					text_colour(f_gray, b_black);
					cout << "Enter guess #" << pos << " : ";
					pos2 = 0;
					guess[pos2] = toupper(_getwch());
				}//validate
				// Print letter in correct colour
				switch (guess[pos2])
				{
				case 'R': text_colour(f_red, b_black); break;
				case 'G': text_colour(f_green, b_black); break;
				case 'B':text_colour(f_blue, b_black);break;
				case 'Y': text_colour(f_yellow, b_black); break;
				case 'C': text_colour(f_cyan, b_blue); break;
				case 'M': text_colour(f_magenta, b_black); break;
				}
				// Prints out the guess
				cout << guess[pos2];
			}// guess
			// Add zeros characters
			guess[pos2] = '\0';
			// check if the guess matches the correct answer
			// Make a copy in order to find the characters in wrong place
			for (pos2 = 0;pos2 < CODESIZE;pos2++)
				copy[pos2] = answer[pos2];
			// Initialize the correct number
			num_correct = 0;
			// Calculate right position ones
			for (pos2 = 0;pos2 < CODESIZE;pos2++)
			{
				if (guess[pos2] == copy[pos2])
				{
					num_correct++;
					copy[pos2] = '*';    // Blank out that spot in copy
					guess[pos2] = '#';   // Use another special character to blank out in case of double counting
				}//if
			}//for

			// Initialize the number in wrong spot
			num_wrong = 0;
			// Loop through all spots
			for (pos2 = 0;pos2 < CODESIZE;pos2++)
			{
				// Eliminate the correct spots in order to reduce the seaching area
				if (guess[pos2] != '#')
				{
					// Loop through copy
					for (pos3 = 0;pos3 < CODESIZE;pos3++)
					{
						if (guess[pos2] == copy[pos3])
						{
							num_wrong++;
							copy[pos3] = '*';
							guess[pos2] = '#';
							pos3 = CODESIZE;
						}// if
					}
				}
			}
			// Print correct and wrong-placed Number
			text_colour(f_white, b_black);
			cout << "      " << "===>  ";
			if (num_correct == CODESIZE)
			{
				text_colour(f_dmagenta, b_gray);
				cout << "YOU WIN!!!!!!!         ";
				pos = 11;
			}
			else
			{
				cout << num_correct << " Exact, " << num_wrong << " Wrong Place" << endl;
				pos++;
			}
		}// for
	} while (pos <= 10 && num_correct != CODESIZE);
	if (num_correct == CODESIZE)
		return true;
	else
	{
		cout << "YOU LOST - The Correct Answer was ";
		for (pos = 0;pos < CODESIZE;pos++)
		{
			switch (answer[pos])
			{
			case 'R': text_colour(f_red, b_black); break;
			case 'G': text_colour(f_green, b_black); break;
			case 'B':text_colour(f_blue, b_black);break;
			case 'Y': text_colour(f_yellow, b_black); break;
			case 'C': text_colour(f_cyan, b_blue); break;
			case 'M': text_colour(f_magenta, b_black); break;
			}
			cout << answer[pos];
		}
		text_colour(f_white, b_black);
		cout<< "!!!";
		return false;
	}
}
